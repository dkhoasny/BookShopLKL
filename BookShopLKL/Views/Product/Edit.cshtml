
@model BookShopLKL.Models.ProductVM
@{
    ViewBag.Title = "Edit Product Details";
}

<!-- CSS -->
<style>
    .input-group label {
        margin-bottom: 0;
        cursor: pointer;
    }
</style>

<div class="row">
    <div class="col">
        <div class="row g-3">
            <div class="col-md-4">
                <h2 class="text-info">@Model.Name</h2>
            </div>
            <div class="col-md-8">
                <div class="d-flex justify-content-end">
                    <img src="@Url.Content(Model.PicturePath)" alt="@Model.Name" width="80" height="80" />
                </div>
            </div>
        </div>
        <hr />
        <div class="col-md-12">
            @using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.HiddenFor(x => x.ProductID)
                @Html.HiddenFor(x => x.PicturePath)
                <div class="row g-3">
                    <div class="col-md-12">
                        @Html.LabelFor(x => x.Name, new { @class = "form-label fs-4" })
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control fs-4" })
                        @Html.ValidationMessageFor(x => x.Name, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-12">
                        @Html.LabelFor(x => x.SupplierID, new { @class = "form-label fs-4" })
                        @Html.DropDownListFor(x => x.SupplierID, ViewBag.supplierList as SelectList, "***Chọn Nhà cung cấp***", new { @class = "form-control fs-4" })
                        @Html.ValidationMessageFor(x => x.SupplierID, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        @Html.LabelFor(x => x.CategoryID, new { @class = "form-label fs-4" })
                        @*@Html.DropDownListFor(x => x.CategoryID, ViewBag.categoryList as SelectList, "***Chọn Danh mục***", new { @class = "form-control fs-4" })*@
                        @Html.DropDownListFor(x => x.CategoryID, ViewBag.categoryList as SelectList, "***Chọn danh mục***", new { @class = "form-control fs-4", @id = "CategoryID" })
                        @Html.ValidationMessageFor(x => x.CategoryID, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.SubCategoryID, new { @class = "form-label fs-4" })
                        @Html.DropDownListFor(x => x.SubCategoryID, ViewBag.SubCategoryList as SelectList, "***Chọn Danh mục con***", new { @class = "form-control fs-4" })
                        @*@Html.DropDownListFor(x => x.SubCategoryID, new SelectList(Enumerable.Empty<SelectListItem>()), "***Chọn danh mục con***", new { @class = "form-control fs-4", @id = "SubCategoryID" })*@
                        @Html.ValidationMessageFor(x => x.SubCategoryID, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.UnitPrice, new { @class = "form-label fs-4" })
                        @*@Html.TextBoxFor(x => x.UnitPrice, new { @class = "form-control fs-4", Type = "money" })*@
                        @*@Html.TextBoxFor(x => x.UnitPrice, new { @class = "form-control fs-4", type = "text", @Value = Model.UnitPrice >= 0 ? String.Format("{0:N0}", Model.UnitPrice) : string.Empty })*@
                        @*<input type="text" class="form-control fs-4" id="UnitPrice" name="UnitPrice"
                            value="@(@Model.UnitPrice >= 0 ? String.Format("{0:N0}", Model.UnitPrice) : "")" />*@
                        @*<input type="text" class="form-control fs-4" id="UnitPrice" name="UnitPrice" value="@Model.UnitPrice.ToString("0")" />*@
                        @*<script>
                                document.addEventListener("DOMContentLoaded", function () {
                                    const input = document.getElementById("UnitPrice");

                                    input.addEventListener("input", function () {
                                        // Lấy giá trị nhập vào và loại bỏ ký tự không phải số
                                        let value = this.value.replace(/[^0-9]/g, '');

                                        // Định dạng giá trị với dấu phẩy
                                        if (value) {
                                            //this.value = Number(value).toLocaleString('vi-VN') + " VNĐ"; // Định dạng với VNĐ
                                            this.value = Number(value).toLocaleString();
                                        } else {
                                            this.value = '';
                                        }
                                    });

                                    // Trước khi gửi form, loại bỏ ký tự không hợp lệ
                                    document.querySelector("form").addEventListener("submit", function () {
                                        input.value = input.value.replace(/[^0-9]/g, ''); // Giữ lại chỉ số
                                    });
                                });
                            </script>*@
                        @*<script>
                                document.addEventListener("DOMContentLoaded", function () {
                                    const input = document.getElementById("UnitPrice");
                                    let rawValue = ''; // Biến tạm để lưu giá trị số nguyên

                                    input.addEventListener("input", function () {
                                        // Lấy giá trị nhập vào và loại bỏ ký tự không phải số
                                        rawValue = this.value.replace(/[^0-9]/g, ''); // Lưu giá trị số nguyên

                                        // Định dạng giá trị với dấu phẩy
                                        if (rawValue) {
                                            this.value = Number(rawValue).toLocaleString(); // Hiển thị giá trị với dấu phẩy
                                        } else {
                                            this.value = '';
                                        }
                                    });

                                    // Trước khi gửi form, gán lại giá trị rawValue cho input
                                    document.querySelector("form").addEventListener("submit", function () {
                                        input.value = rawValue; // Gửi giá trị số nguyên mà không có dấu phẩy
                                    });
                                });
                            </script>*@
                        @Html.TextBoxFor(model => model.UnitPrice, new { @class = "form-control fs-4", @id = "UnitPrice", @Value = Model.UnitPrice >= 0 ? String.Format("{0:N0}", Model.UnitPrice) : "" })

                        <script>
                            document.addEventListener("DOMContentLoaded", function () {
                                const input = document.getElementById("UnitPrice");
                                let rawValue = input.value.replace(/[^0-9]/g, ''); // Lưu giá trị số nguyên ban đầu

                                input.addEventListener("input", function () {
                                    // Lấy giá trị nhập vào và loại bỏ ký tự không phải số
                                    rawValue = this.value.replace(/[^0-9]/g, ''); // Cập nhật rawValue với giá trị mới

                                    // Định dạng giá trị với dấu phẩy
                                    if (rawValue) {
                                        this.value = Number(rawValue).toLocaleString(); // Hiển thị giá trị với dấu phẩy
                                    } else {
                                        this.value = ''; // Nếu không có giá trị, để trống
                                    }
                                });

                                // Trước khi gửi form, gán lại giá trị rawValue cho input
                                document.querySelector("form").addEventListener("submit", function () {
                                    if (rawValue) {
                                        input.value = rawValue; // Gửi giá trị số nguyên mà không có dấu phẩy
                                    } else {
                                        input.value = ''; // Nếu không có giá trị mới, giữ nguyên giá trị cũ
                                    }
                                });
                            });
                        </script>

                        @Html.ValidationMessageFor(x => x.UnitPrice, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.OldPrice, new { @class = "form-label fs-4" })
                        @*@Html.TextBoxFor(x => x.OldPrice, new { @class = "form-control fs-4" })*@
                        @*<input type="text" class="form-control fs-4" id="OldPrice" name="OldPrice"
                                   value="@(@Model.OldPrice >= 0 ? String.Format("{0:N0}", Model.OldPrice) : "")" />
                            <script>
                                document.addEventListener("DOMContentLoaded", function () {
                                    const input = document.getElementById("OldPrice");
                                    let rawValue = ''; // Biến tạm để lưu giá trị số nguyên

                                    input.addEventListener("input", function () {
                                        // Lấy giá trị nhập vào và loại bỏ ký tự không phải số
                                        rawValue = this.value.replace(/[^0-9]/g, ''); // Lưu giá trị số nguyên

                                        // Định dạng giá trị với dấu phẩy
                                        if (rawValue) {
                                            this.value = Number(rawValue).toLocaleString(); // Hiển thị giá trị với dấu phẩy
                                        } else {
                                            this.value = '';
                                        }
                                    });

                                    // Trước khi gửi form, gán lại giá trị rawValue cho input
                                    document.querySelector("form").addEventListener("submit", function () {
                                        input.value = rawValue; // Gửi giá trị số nguyên mà không có dấu phẩy
                                    });
                                });
                            </script>*@
                        @Html.TextBoxFor(model => model.OldPrice, new { @class = "form-control fs-4", @id = "OldPrice", @Value = Model.OldPrice >= 0 ? String.Format("{0:N0}", Model.OldPrice) : "" })

                        <script>
                            document.addEventListener("DOMContentLoaded", function () {
                                const input = document.getElementById("OldPrice");
                                let rawValue = input.value.replace(/[^0-9]/g, ''); // Lưu giá trị số nguyên ban đầu

                                input.addEventListener("input", function () {
                                    // Lấy giá trị nhập vào và loại bỏ ký tự không phải số
                                    rawValue = this.value.replace(/[^0-9]/g, ''); // Cập nhật rawValue với giá trị mới

                                    // Định dạng giá trị với dấu phẩy
                                    if (rawValue) {
                                        this.value = Number(rawValue).toLocaleString(); // Hiển thị giá trị với dấu phẩy
                                    } else {
                                        this.value = ''; // Nếu không có giá trị, để trống
                                    }
                                });

                                // Trước khi gửi form, gán lại giá trị rawValue cho input
                                document.querySelector("form").addEventListener("submit", function () {
                                    if (rawValue) {
                                        input.value = rawValue; // Gửi giá trị số nguyên mà không có dấu phẩy
                                    } else {
                                        input.value = ''; // Nếu không có giá trị mới, giữ nguyên giá trị cũ
                                    }
                                });
                            });
                        </script>
                        @Html.ValidationMessageFor(x => x.OldPrice, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.ShortDescription, new { @class = "form-label fs-4" })
                        @Html.TextAreaFor(x => x.ShortDescription, new { @class = "form-control fs-4" })
                        @Html.ValidationMessageFor(x => x.ShortDescription, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.UnitInStock, new { @class = "form-label fs-4" })
                        @Html.TextBoxFor(x => x.UnitInStock, new { @class = "form-control fs-4" })
                        @Html.ValidationMessageFor(x => x.UnitInStock, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6">
                        @Html.LabelFor(x => x.Picture, new { @class = "form-label fs-4" })
                        @*@Html.TextBoxFor(x => x.Picture, new { @class = "form-control fs-4", Type = "file" })*@

                        <div class="input-group mb-3">
                            <!-- Nút tùy chỉnh chọn tệp -->
                            <label for="file-upload" class="btn btn-primary fs-4">Chọn tệp tin</label>
                            <!-- Input file ẩn -->
                            @Html.TextBoxFor(x => x.Picture, new { @class = "form-control fs-4", type = "file", id = "file-upload", style = "display:none;" })
                            <!-- Hiển thị tên tệp tin -->
                            <input type="text" id="file-name" class="form-control fs-4" value="Chưa có tệp tin nào được chọn" readonly />
                        </div>

                        @Html.ValidationMessageFor(x => x.Picture, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6 mt-4">
                        <button type="submit" class="btn btn-success btn-lg col-12 mt-4"><i class="fa-solid fa-up fs-4"></i> Cập nhật</button>
                    </div>
                </div>
            }

            <div class="col-md-12 d-flex justify-content-lg-start mt-2">
                <a href="@Url.Action("Index", "Product")" class="btn btn-danger btn-sm fs-4"><i class="fa-regular fa-hand-back-point-left"></i> Trở về</a>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
@*<script>
        document.getElementById('file-upload').addEventListener('change', function() {
            var fileName = this.files[0] ? this.files[0].name : "Chưa có tệp tin nào được chọn";
            document.getElementById('file-name').value = fileName;
        });
    </script>*@

@section scripts{
    <script src="~/Content/JS/jquery-3.6.0.js"></script>
    <script src="~/Content/JS/jquery.validate.js"></script>
    <script src="~/Content/JS/jquery.validate.unobtrusive.js"></script>
    <script src="~/Content/JS/jquery.unobtrusive-ajax.js"></script>

    <script>
        $(document).ready(function() {
            // Hiển thị danh mục con nếu đã có danh mục chính được chọn
            var initialCategoryId = $('#CategoryID').val();
            var initialSubCategoryId = $('#SubCategoryID').val(); // Lấy giá trị danh mục con hiện tại
            if (initialCategoryId) {
                loadSubCategories(initialCategoryId, initialSubCategoryId); // Gọi hàm để tải danh mục con
            }

            $('#CategoryID').change(function() {
                var categoryId = $(this).val();
                if (categoryId) {
                    loadSubCategories(categoryId); // Tải lại danh mục con khi chọn danh mục chính mới
                } else {
                    resetSubCategoryDropdown(); // Đặt lại danh mục con nếu không có danh mục chính
                }
            });
        });

        function loadSubCategories(categoryId, selectedSubCategoryId) {
            $.ajax({
                url: '@Url.Action("GetSubCategories", "Product")', // Đường dẫn đến action lấy danh mục con
                type: 'POST', // Sử dụng phương thức POST
                data: { categoryId: categoryId },
                success: function(data) {
                    $('#SubCategoryID').empty().append($('<option>').text('***Chọn danh mục con***').attr('value', '')); // Reset danh sách danh mục con

                    // Kiểm tra nếu có danh mục con và thêm vào dropdown
                    if (data.success) {
                        $.each(data.data, function(index, item) {
                            var option = $('<option>').text(item.Text).attr('value', item.Value);
                            if (item.Value == selectedSubCategoryId) {
                                option.prop('selected', true); // Đánh dấu danh mục con đã chọn trước đó
                            }
                            $('#SubCategoryID').append(option);
                        });
                        $('#SubCategoryID').prop('disabled', false); // Kích hoạt dropdown danh mục con
                    } else {
                        $('#SubCategoryID').prop('disabled', true); // Khóa dropdown nếu không có danh mục con
                    }
                },
                error: function(xhr, status, error) {
                    console.error("Error fetching subcategories: ", error);
                }
            });
        }

        function resetSubCategoryDropdown() {
            $('#SubCategoryID').empty().append($('<option>').text('***Chọn danh mục con***').attr('value', '')).prop('disabled', true); // Đặt lại danh mục con
        }

        function clearAll() {
            $("#form0").trigger("reset"); // Đặt lại form
        }
    </script>
}

